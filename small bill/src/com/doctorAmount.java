/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com;

import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import small.bill.DBClass;

/**
 *
 * @author CHETHANA
 */
public class doctorAmount extends javax.swing.JFrame {

    /**
     * Creates new form doctorAmount
     */
    public doctorAmount() {
        initComponents();
     //    setLocationRelativeTo(null);
     //  setExtendedState(JFrame.MAXIMIZED_BOTH);
        searchTableDoctorAmountAll();
    }

    private static doctorAmount doctorAmountV = new doctorAmount();

    public static doctorAmount getCallPopup() {
        return doctorAmountV;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel37 = new javax.swing.JLabel();
        jLayeredPaneTop = new javax.swing.JLayeredPane();
        la_minimise = new javax.swing.JLabel();
        la_close = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_doctorAmount = new javax.swing.JTable();
        b_savepdf_doctorAmount = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setLocation(new java.awt.Point(145, 45));
        setMinimumSize(new java.awt.Dimension(800, 633));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(800, 633));
        getContentPane().setLayout(null);

        jLabel37.setBackground(new java.awt.Color(23, 160, 160));
        jLabel37.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(0, 0, 0));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel37.setText("Doctor's AMOUNTS");
        jLabel37.setOpaque(true);
        getContentPane().add(jLabel37);
        jLabel37.setBounds(0, 30, 800, 40);

        jLayeredPaneTop.setBackground(new java.awt.Color(4, 37, 87));
        jLayeredPaneTop.setMinimumSize(new java.awt.Dimension(1380, 45));
        jLayeredPaneTop.setOpaque(true);

        la_minimise.setBackground(new java.awt.Color(4, 37, 87));
        la_minimise.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        la_minimise.setForeground(new java.awt.Color(255, 255, 255));
        la_minimise.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        la_minimise.setText("-");
        la_minimise.setOpaque(true);
        la_minimise.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                la_minimiseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                la_minimiseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                la_minimiseMouseExited(evt);
            }
        });
        jLayeredPaneTop.add(la_minimise);
        la_minimise.setBounds(720, 0, 35, 30);

        la_close.setBackground(new java.awt.Color(4, 37, 87));
        la_close.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        la_close.setForeground(new java.awt.Color(255, 255, 255));
        la_close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        la_close.setText("x");
        la_close.setOpaque(true);
        la_close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                la_closeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                la_closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                la_closeMouseExited(evt);
            }
        });
        jLayeredPaneTop.add(la_close);
        la_close.setBounds(760, 0, 40, 30);

        getContentPane().add(jLayeredPaneTop);
        jLayeredPaneTop.setBounds(0, 0, 800, 30);

        jTable1_doctorAmount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                " Name", "Phone", "Bank", "Bank Number", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1_doctorAmount);
        if (jTable1_doctorAmount.getColumnModel().getColumnCount() > 0) {
            jTable1_doctorAmount.getColumnModel().getColumn(0).setMinWidth(250);
            jTable1_doctorAmount.getColumnModel().getColumn(0).setPreferredWidth(250);
            jTable1_doctorAmount.getColumnModel().getColumn(0).setMaxWidth(250);
            jTable1_doctorAmount.getColumnModel().getColumn(2).setMinWidth(150);
            jTable1_doctorAmount.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1_doctorAmount.getColumnModel().getColumn(2).setMaxWidth(150);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 90, 780, 403);

        b_savepdf_doctorAmount.setBackground(new java.awt.Color(82, 243, 82));
        b_savepdf_doctorAmount.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        b_savepdf_doctorAmount.setForeground(new java.awt.Color(0, 0, 0));
        b_savepdf_doctorAmount.setText("Save PDF");
        b_savepdf_doctorAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_savepdf_doctorAmountActionPerformed(evt);
            }
        });
        getContentPane().add(b_savepdf_doctorAmount);
        b_savepdf_doctorAmount.setBounds(550, 530, 240, 90);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void la_minimiseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_minimiseMouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_la_minimiseMouseClicked

    private void la_minimiseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_minimiseMouseEntered
        la_minimise.setBackground(Color.GRAY);
    }//GEN-LAST:event_la_minimiseMouseEntered

    private void la_minimiseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_minimiseMouseExited
        la_minimise.setBackground(new Color(4, 37, 87));
    }//GEN-LAST:event_la_minimiseMouseExited

    private void la_closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_closeMouseClicked
        int x = JOptionPane.showConfirmDialog(this, "Do you sure close ?", "Exit System", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            this.dispose();
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            la_close.setBackground(new Color(4, 37, 87));
        }
    }//GEN-LAST:event_la_closeMouseClicked

    private void la_closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_closeMouseEntered
        la_close.setBackground(Color.red);
    }//GEN-LAST:event_la_closeMouseEntered

    private void la_closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_la_closeMouseExited
        la_close.setBackground(new Color(4, 37, 87));
    }//GEN-LAST:event_la_closeMouseExited

    private void b_savepdf_doctorAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_savepdf_doctorAmountActionPerformed

        int x = JOptionPane.showConfirmDialog(this, "Do you want SAVE THIS TABLE ?", "SAVE TABLE", JOptionPane.YES_NO_OPTION);
        if (JOptionPane.YES_OPTION == x) {
            savePDF();
        } else if (JOptionPane.NO_OPTION == x) {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_b_savepdf_doctorAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(doctorAmount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(doctorAmount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(doctorAmount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(doctorAmount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new doctorAmount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_savepdf_doctorAmount;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLayeredPane jLayeredPaneTop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1_doctorAmount;
    private javax.swing.JLabel la_close;
    private javax.swing.JLabel la_minimise;
    // End of variables declaration//GEN-END:variables

    private void savePDF() {
        String path = "";
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = jfc.showSaveDialog(this);
        if (x == JFileChooser.APPROVE_OPTION) {
            path = jfc.getSelectedFile().getAbsolutePath();
        }
        Document doc = new Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + invoice.la_date.getText() + jfc.getSelectedFile().getName() + "DoctorAmount.pdf"));//
            doc.open();
            PdfPTable tb1 = new PdfPTable(5);
            PdfPTable tb2 = new PdfPTable(2);

            tb1.addCell("Name");
            tb1.addCell("Phone");
            tb1.addCell("Bank");
            tb1.addCell("Bank Number");
            tb1.addCell("Amount");

            tb2.addCell("Date");
            tb2.addCell("Total");
            
            tb2.addCell(invoice.la_date.getText());
            double t = 0;
            for (int i = 0; i < jTable1_doctorAmount.getRowCount(); i++) {
                String nameD = jTable1_doctorAmount.getValueAt(i, 0).toString();
                String phone = jTable1_doctorAmount.getValueAt(i, 1).toString();
                String bank = jTable1_doctorAmount.getValueAt(i, 2).toString();
                String bankNumber = jTable1_doctorAmount.getValueAt(i, 3).toString();
                String amount = jTable1_doctorAmount.getValueAt(i, 4).toString();
                t += Double.parseDouble(amount);
                tb1.addCell(nameD);
                tb1.addCell(phone);
                tb1.addCell(bank);
                tb1.addCell(bankNumber);
                tb1.addCell(amount);
            }
            t = Math.round(t);
            tb2.addCell(""+t);
            
            doc.add(tb1);
            doc.add(tb2);
            
            JOptionPane.showMessageDialog(null, "Save PDF File ", "After Save Massage", JOptionPane.WARNING_MESSAGE);
        } catch (DocumentException ex) {
            JOptionPane.showMessageDialog(this, "Document Error savePDF!!! \n " + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "This file can't Found savePDF !!! \n " + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Mistacke savePDF !!! \n " + ex, "Error Massage", JOptionPane.ERROR_MESSAGE);
        }

        doc.close();

    }

    private void searchTableDoctorAmountAll() {
        try {
            //  ResultSet rs = DBClass.getData("select do.id,do.name,do.phone,do.bankacountnumber,do.bankaname,am.amount from doctor inner join doctoramount on do.id = am.doctorid ");
            DefaultTableModel dm = (DefaultTableModel) jTable1_doctorAmount.getModel();
            dm.setRowCount(0);

            ResultSet rs1 = DBClass.getData("SELECT * FROM doctor INNER JOIN doctoramount ON doctor.id=doctoramount.doctorid");
            ResultSet rs2 = DBClass.getData("SELECT * FROM doctoramount");
            if (DBClass.r.isBeforeFirst() == true) {
                while (rs1.next()) {
                    Vector v = new Vector();
                    v.add(rs1.getString("name"));
                    v.add(rs1.getString("phone"));
                    v.add(rs1.getString("bankaname"));
                    v.add(rs1.getString("bankacountnumber"));
                    if (rs2.next()) {
                        v.add(rs2.getString("amount"));
                        dm.addRow(v);
                    }

                }
            }
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(null, "NOT connect to the data base searchTableDoctorAmountAll!!!!" + sqle);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Null value searchTableDoctorAmountAll!!!!" + e);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error searchTableDoctorAmountAll!!!!" + e);
        }
    }

}
